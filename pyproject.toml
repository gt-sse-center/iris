[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "iris"
description = "Tool for manual image annotation"
authors = [
    {name = "John Mrziglod", email = "mrzo@gmx.de"},
    {name = "Alistair Francis"}
]
readme = "README.md"
requires-python = ">=3.8"
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
]
dependencies = [
    "flask>=2.3.2",
    "flask_compress>=1.13",
    "flask-sqlalchemy>=2.5.1,<4.0",
    "numpy>=1.23.4",
    "pyyaml>=5.4.1",
    "lightgbm>=3.3.3",
    "rasterio>=1.3.3",
    "requests>=2.28.1",
    "scipy>=1.9.3",
    "scikit-image>=0.19.3",
    "scikit-learn>=1.0.0",
    "sqlalchemy>=1.4.4,<2.0",
    "matplotlib>=3.6.2",
    "gevent>=22.8.0",
]
dynamic = ["version"]

[project.optional-dependencies]
test = [
    "pytest>=6.0.0",
    "pytest-flask>=1.0.0",
]

[project.urls]
Homepage = "https://github.com/ESA-PhiLab/iris"
Repository = "https://github.com/ESA-PhiLab/iris"

[project.scripts]
iris = "iris:run_app"

[tool.setuptools.dynamic]
version = {attr = "iris.__version__"}

[tool.setuptools.packages.find]
include = ["iris*"]

[tool.setuptools.package-data]
iris = ["*.json", "*/templates/*", "*/static/*/*"]

[tool.black]
line-length = 120

[tool.isort]
profile = "black"
line_length = 120

[tool.ruff]
line-length = 120
target-version = "py38"  # Match project's minimum Python version
exclude = [
    "docs",
    "preview",
    "demo/*/*.iris",
]

[tool.ruff.lint]
select = [
    "E",    # pycodestyle errors
    "W",    # pycodestyle warnings  
    "F",    # pyflakes
    "I",    # isort (import sorting)
    "UP",   # pyupgrade (modern Python syntax)
    "B",    # flake8-bugbear
    "C4",   # flake8-comprehensions
    "PIE",  # flake8-pie
    "SIM",  # flake8-simplify
]
extend-ignore = ["E203"]  # Black compatibility

[tool.ruff.lint.isort]
known-first-party = ["iris"]

# Bandit security linter configuration
[tool.bandit]
exclude_dirs = ["tests", "demo"]
skips = [
    "B101",  # Skip assert_used test (asserts are OK in tests)
]

# Security-focused test configuration
[tool.bandit.assert_used]
skips = ["**/test_*.py", "**/tests/*.py"]

# High severity security checks
tests = [
    "B102",  # exec_used
    "B103",  # set_bad_file_permissions
    "B104",  # hardcoded_bind_all_interfaces
    "B105",  # hardcoded_password_string
    "B106",  # hardcoded_password_funcarg
    "B107",  # hardcoded_password_default
    "B108",  # hardcoded_tmp_directory
    "B110",  # try_except_pass
    "B112",  # try_except_continue
    "B201",  # flask_debug_true
    "B301",  # pickle
    "B302",  # marshal
    "B303",  # md5
    "B304",  # des
    "B305",  # cipher
    "B306",  # mktemp_q
    "B307",  # eval
    "B308",  # mark_safe
    "B309",  # httpsconnection
    "B310",  # urllib_urlopen
    "B311",  # random
    "B312",  # telnetlib
    "B313",  # xml_bad_cElementTree
    "B314",  # xml_bad_ElementTree
    "B315",  # xml_bad_expatreader
    "B316",  # xml_bad_expatbuilder
    "B317",  # xml_bad_sax
    "B318",  # xml_bad_minidom
    "B319",  # xml_bad_pulldom
    "B320",  # xml_bad_etree
    "B321",  # ftplib
    "B322",  # input
    "B323",  # unverified_context
    "B324",  # hashlib_new_insecure_functions
    "B325",  # tempnam
    "B401",  # import_telnetlib
    "B402",  # import_ftplib
    "B403",  # import_pickle
    "B404",  # import_subprocess
    "B405",  # import_xml_etree
    "B406",  # import_xml_sax
    "B407",  # import_xml_expat
    "B408",  # import_xml_minidom
    "B409",  # import_xml_pulldom
    "B410",  # import_lxml
    "B411",  # import_xmlrpclib
    "B412",  # import_httpoxy
    "B413",  # import_pycrypto
    "B501",  # request_with_no_cert_validation
    "B502",  # ssl_with_bad_version
    "B503",  # ssl_with_bad_defaults
    "B504",  # ssl_with_no_version
    "B505",  # weak_cryptographic_key
    "B506",  # yaml_load
    "B507",  # ssh_no_host_key_verification
    "B601",  # paramiko_calls
    "B602",  # subprocess_popen_with_shell_equals_true
    "B603",  # subprocess_without_shell_equals_true
    "B604",  # any_other_function_with_shell_equals_true
    "B605",  # start_process_with_a_shell
    "B606",  # start_process_with_no_shell
    "B607",  # start_process_with_partial_path
    "B608",  # hardcoded_sql_expressions
    "B609",  # linux_commands_wildcard_injection
    "B610",  # django_extra_used
    "B611",  # django_rawsql_used
    "B701",  # jinja2_autoescape_false
    "B702",  # use_of_mako_templates
    "B703",  # django_mark_safe
]

[dependency-groups]
dev = [
    "ruff>=0.14.3",
]
